@inject IVirusTotalService vtService
@inject IWarningService warningService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudTooltip Text="@_tip">

    @if (positives > 0)
    {
        <MudBadge Content="@positives" Color="Color.Error" Overlap Class="mb-4 mx-2">
        <MudChip OnClick="@VerifyDomain">
            @Domain
            @if (_scanning)
                {
                    <MudProgressCircular Class="mx-2" Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                }
            </MudChip>
        </MudBadge>
    }
    else if (positives == 0)
    {
        <MudBadge Content="@positives" Color="Color.Info" Overlap Class="mb-4 mx-2">
        <MudChip OnClick="@VerifyDomain">
            @Domain
            @if (_scanning)
                {
                    <MudProgressCircular Class="mx-2" Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                }
            </MudChip>
        </MudBadge>

    }
    else
    {
        <MudBadge Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Overlap Class="mb-4 mx-2">
        <MudChip OnClick="@VerifyDomain">
            @Domain
            @if (_scanning)
                {
                    <MudProgressCircular Class="mx-2" Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                }
            </MudChip>
        </MudBadge>
    }

</MudTooltip>


@code{
    [Parameter] public string Domain { get; set; }

    private string _tip = "This domain's reputation is yet to be checked";
    private bool _scanning = false;

    //default value to indicate unscanned
    private int positives = -2;

    private async Task VerifyDomain()
    {

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Verify that this domain really is what you think it is.");
        parameters.Add("TextToVerify", Domain);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<InspectionDialog>("Verify Domain", parameters, options);


        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        _scanning = true;
        StateHasChanged();
        positives = await vtService.CheckReputation(Domain);
        _scanning = false;
        if (positives == -1)
        {
            //unscanned

        }
        else if (positives > 0)
        {
            //scanned and bad
            _tip = "This domain has been flagged as dangerous by VirusTotal.";
            Snackbar.Add("VirusTotal flagged this domain as suspicious.", Severity.Error);
            warningService.AddWarning("Domain flagged as suspicious: " + Domain);
        }
        else if (positives == 0)
        {
            //scanned and fine
            _tip = "This domain is though to be safe by VirusTotal";
        }
        else if (positives == -2)
        {
            //no response, rate limited
            Snackbar.Add("VirusTotal Rate Limit hit. Wait a few minutes and try again.", Severity.Info);
        }



        StateHasChanged();
    }
}