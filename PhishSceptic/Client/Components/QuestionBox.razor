@using System.Text.RegularExpressions
<DashboardItem Title="Questions">
    <ComponentBody>

        @if (questions != null)
        {
            @for (int i = 0; i < questions.Count(); i++)
            {
                int index = i;
                bool isHidden = !(index == questionIndex);
                <div hidden="@isHidden" class="my-4">
                    <MudGrid>
                        <MudItem md="9" sm="12">
                            <MudPaper Outlined Class="pa-4 mb-2">
                                <MudText Typo="Typo.h4" Align="Align.Center">Question</MudText>
                                <YesNoQuestion OnAnswer="@updateScore" Question="@questions[index]" />
                            </MudPaper>

                        </MudItem>
                        <MudItem md="3" sm="12">
                            <MudPaper Outlined Class="pa-4">
                                <MudText Typo="Typo.h4" Align="Align.Center">Info</MudText>
                                <MudText Align="Align.Center" Color="Color.Info">Info: @questions[index].description</MudText>
                            </MudPaper>

                        </MudItem>

                    </MudGrid>
                </div>

            }


            <MudPaper Class="d-flex justify-space-between gap-2" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Back" Disabled="@backDisabled">Back</MudButton>
                @{
                    int current = questionIndex + 1;
                    <MudText>@current / @questions.Count()</MudText>
                }
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Next" Disabled="@nextDisabled">Next</MudButton>
            </MudPaper>
        }
    </ComponentBody>
    <ComponentHelp>
        <MudText>Answer the yes and no questions, looking at the info section to explain the importance of the questions and their significance.</MudText>
    </ComponentHelp>


</DashboardItem>


@code {

    [Parameter] public QuestionBank questionBank { get; set; }
    [Inject] IWarningService warningService { get; set; }

    private bool backDisabled = true;
    private bool nextDisabled = false;

    private Question[] questions;

    private int questionIndex = 0;

    private void Back()
    {
        nextDisabled = false;
        if (questionIndex > 0)
        {
            questionIndex--;
        }

        if (questionIndex == 0)
        {
            backDisabled = true;
        }

    }
    private void Next()
    {
        backDisabled = false;
        if (questionIndex < questions.Count()-1)
        {
            questionIndex++;
        }

        if (questionIndex == questions.Count()-1)
        {
            nextDisabled = true;
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        questions = questionBank.GetQuestions();
    }

    private void updateScore()
    {
        warningService.Reset();

        foreach(Question q in questions)
        {
            float polarity = 0;
            if (q.isYes == true)
            {
                polarity += q.weighting;
            }
            else if (q.isYes == false)
            {
                polarity -= q.weighting;
            }

            if (polarity < 0)
            {
                warningService.AddWarning(q.warning);
            }            
        }


        StateHasChanged();
    }


}
