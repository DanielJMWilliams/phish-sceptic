@inject IDialogService DialogService
@inject ISnackbar Snackbar

<DashboardItem Title="Sender Inspector" Description="This component helps you inspect the sender">
    <ComponentBody>
        <MudPaper Elevation="1" Class="my-5 pa-4">
            <MudText>The email was sent by:</MudText>
            @{
                string icon = Icons.Material.Filled.WarningAmber;
                Color color = Color.Warning;
                if(domainReputation > 0)
                {
                    color = Color.Error;
                    icon = Icons.Material.Filled.Dangerous;

                }
                else if (domainReputation==0)
                {
                    color = Color.Info;
                    icon = Icons.Material.Filled.Check;
                }
                <MudPaper Outlined Class="d-flex justify-center my-4">
                    <MudBadge Icon="@icon" Color="color">
                        <MudText Class="my-2" Color="@(_isVerified ? Color.Default : Color.Error)"
                                Align="Align.Center" Typo="Typo.h6">
                            @_sender
                        </MudText>                    
                    

                    </MudBadge>
                </MudPaper>
            }

            <MudText>In the input field below, type the email address as you see it.</MudText>
            <MudTextField Immediate TextChanged="@verify" @bind-Value="_typedValue"
                          Label="Type what you see above" Variant="Variant.Text"></MudTextField>
            <MudPaper Class="my-2 pa-2" Elevation="3">
                @if (!_isVerified && _typedValue != "")
                {
                    <MudText Color="Color.Error">
                        Currently the actual email address and the email address you typed do NOT match.
                        Attackers often will use misleading email addresses with similar characters to trick people.
                    </MudText>
                }
                else if (_isVerified)
                {
                    <MudText Color="Color.Info">
                        The email addresses match. However this does not necessarily mean the email is legitimate.
                        Continue looking at the other phishing indicators.
                    </MudText>
                }
            </MudPaper>

            <MudTooltip>
                <ChildContent>
                    <MudButton Disabled="@( !_isVerified)" Color="Color.Info" Variant="Variant.Filled" OnClick="submitVerify">Verify</MudButton>
                </ChildContent>
                <TooltipContent>
                    <MudText>Upon verifying this email address, its domain will be sent to VirusTotal to be scanned.</MudText>
                </TooltipContent>
            </MudTooltip>
        </MudPaper>
    </ComponentBody>
    <ComponentHelp>
        <SenderInspectorHelp/>
    </ComponentHelp>
</DashboardItem>

@code {
    [Parameter] public EmailAnalyser emailAnalyser { get; set; }

    [Inject] IVirusTotalService vtService { get; set; }
    [Inject] IWarningService warningService { get; set; }

    private string _sender = "";

    private string _typedValue = "";

    //initialise to default value
    private int domainReputation = -3;

    protected async override Task OnParametersSetAsync()
    {
        _sender = emailAnalyser.GetSender();
    }

    private async Task submitVerify()
    {
        string domain = _sender.Substring(_sender.IndexOf("@")+1);
        Console.WriteLine(domain);
        domainReputation = await vtService.CheckReputation(domain);
        if (domainReputation > 0)
        {
            Snackbar.Add("VirusTotal flagged this email as suspicious.", Severity.Error);
            warningService.AddWarning("dodgy sender: " + _sender);
        }
        StateHasChanged();
    }

    private bool _isVerified = false;
    private async Task verify()
    {
        if(_typedValue == _sender)
        {
            _isVerified = true;
        }
        else{
            _isVerified = false;
        }

    }
}
