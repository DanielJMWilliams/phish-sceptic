@using MudBlazor
@using System
@inject HttpClient Http
@page "/"
@inject ISnackbar Snackbar

<MudText>API Status: @apiStatus</MudText>
@{
Console.WriteLine("loading: "+ loading);
}
@if (emailAnalyser==null)
{
    <HomePage UploadFile=@uploadFile></HomePage>
    
}
else if (loading && emailAnalyser!=null)
{
    <MudText Typo="Typo.h1" Align="Align.Center">PhishSceptic</MudText>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    Analyse();
}
else{
    Console.WriteLine(loading);
    <InfoComponent></InfoComponent>
    <MudButton Color="Color.Error" OnClick="@startOver">Restart</MudButton>
    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@emailAnalyser">
        Uploaded: @emailAnalyser.GetFileName() <code>@emailAnalyser.GetFileSize() bytes</code>
    </MudListItem>
    
    <MudDivider Class="my-5"></MudDivider>

    <MudGrid>
        <MudItem md="6">
            <LinkAnalyser emailAnalyser="@emailAnalyser"></LinkAnalyser>
            <MudDivider Class="my-4"></MudDivider>
            <AttachmentInspector emailAnalyser="@emailAnalyser"></AttachmentInspector>
        </MudItem>
        <MudItem md="6">
            <SenderInspector emailAnalyser="@emailAnalyser"></SenderInspector>
            <MudDivider Class="my-4"></MudDivider>
            <UrgencyInspector emailAnalyser="@emailAnalyser"></UrgencyInspector>
        </MudItem>
        <MudItem md="12">
            <QuestionBox emailAnalyser="@emailAnalyser" questionBank="@questionBank"></QuestionBox>
        </MudItem>
        <MudItem md="12">
            <ResultsComponent></ResultsComponent>
        </MudItem>
    </MudGrid>   
    
}

@code
{
    private bool loading = true;
    private string apiStatus = "offline";
    private EmailAnalyser emailAnalyser;
    private QuestionBank questionBank;
    [Inject] IWarningService warningService { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //apiStatus = await Http.GetFromJsonAsync<string>("Test");
        apiStatus = await Http.GetStringAsync("Test");

        questionBank = new QuestionBank(Http);
        await questionBank.LoadQuestions();
    }

    private async Task uploadFile(IBrowserFile file)
    {
        emailAnalyser = new EmailAnalyser(file);
        StateHasChanged();
        
    }


    private async Task Analyse()
    {
        await emailAnalyser.Analyse();
        loading = false;

        StateHasChanged();
    }


    private void startOver()
    {
        //reset();
        emailAnalyser = null;
        warningService.Reset();
        loading = true;

    }


    
}